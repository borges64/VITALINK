// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db" // Aqui estamos definindo o banco de dados SQLite para ser armazenado em um arquivo chamado dev.db
}

model User {
  id String @id @default(uuid())
  type Role @default(USER)
  name String
  email String @unique
  password String
  cpf String? @unique
  address String?
  phone String?
  birthDate DateTime?
  moreInfo String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  alergias Alergias[]
  appointments Appointment[] @relation("UserAppointments") // Adicionando o nome da relação
  medicAppointments Appointment[] @relation("MedicAppointments")
}

model Appointment {
  id Int @id @default(autoincrement())
  date DateTime
  userId String
  user User @relation(fields: [userId], references: [id], name: "UserAppointments") // Adicionando o nome da relação
  medicId String
  medic User @relation(fields: [medicId], references: [id], name: "MedicAppointments")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  moreInfo String?
}

model Alergias {
  id Int @id @default(autoincrement())
  name String
  descricao String?
  userId String
  user User @relation(fields: [userId], references: [id])
  @@unique([userId, name])
}

enum Role {
  ADMIN
  USER
  PATIENT
  MEDIC
  ASSISTENT
}
enum Status {
  PENDENTE
  CONFIRMADO
  CANCELADO
}