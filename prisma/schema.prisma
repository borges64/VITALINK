// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db" // Aqui estamos definindo o banco de dados SQLite para ser armazenado em um arquivo chamado dev.db
}


// Modelo de Usuário genérico, incluindo ADMIN como tipo especial de usuário
model User {
  id        String   @id @default(uuid())
  role      Role
  name      String
  email     String   @unique
  password  String
  cpf       String?  @unique
  address   String?
  phone     String?
  birthDate DateTime?
  moreInfo  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos com Clínicas
  clinicsAsMedic     Clinic[] @relation("MedicClinics")
  clinicsAsAssistant Clinic?  @relation("AssistantClinic", fields: [clinicId], references: [id])
  clinicsAsPatient   Clinic?  @relation("PatientClinic", fields: [clinicId], references: [id])
  clinicId           String?

  // Relacionamentos com Consultas e Logs Médicos
  appointmentsAsPatient  Appointment[] @relation("PatientAppointments")
  appointmentsAsDoctor   Appointment[] @relation("DoctorAppointments")
  appointmentsAsAssistant Appointment[] @relation("AssistantAppointments")

  medicalLogsAsDoctor  MedicalLog[] @relation("DoctorLogs")
  medicalLogsAsPatient MedicalLog[] @relation("PatientLogs")
}

// Modelo de Clínica
model Clinic {
  id        String   @id @default(uuid())
  name      String
  cnpj      String   @unique
  address   String
  phone     String
  email     String   @unique
  moreInfo  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  medics       User[] @relation("MedicClinics")
  assistants   User[] @relation("AssistantClinic")
  patients     User[] @relation("PatientClinic")
  appointments Appointment[]
  medicalLogs  MedicalLog[]
}

// Modelo de Consulta
model Appointment {
  id         String   @id @default(uuid())
  date       DateTime
  status     ConsultationStatus
  moreInfo   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relacionamentos
  clinic   Clinic @relation(fields: [clinicId], references: [id])
  clinicId String

  patient   User @relation("PatientAppointments", fields: [patientId], references: [id])
  patientId String

  doctor   User @relation("DoctorAppointments", fields: [doctorId], references: [id])
  doctorId String

  assistant  User? @relation("AssistantAppointments", fields: [assistantId], references: [id])
  assistantId String?
}

// Modelo de Log Médico
model MedicalLog {
  id          String   @id @default(uuid())
  description String
  type        LogType
  createdAt   DateTime @default(now())

  // Relacionamentos
  clinic   Clinic @relation(fields: [clinicId], references: [id])
  clinicId String

  patient  User   @relation("PatientLogs", fields: [patientId], references: [id])
  patientId String

  doctor   User   @relation("DoctorLogs", fields: [doctorId], references: [id])
  doctorId String
}

// Enums para controle de status e tipos de logs
enum Role {
  ADMIN
  MEDIC
  ASSISTANT
  PATIENT
}

enum ConsultationStatus {
  SCHEDULED
  CANCELED
  COMPLETED
}

enum LogType {
  DIAGNOSIS
  EXAM
  ALLERGY
}